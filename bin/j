#!/usr/bin/env ruby

require "j"
require "commander/import"
require "date"
require "tempfile"
require "shellwords"

J::Database::connect

program :name, "j"
program :version, File.read(File.join(File.dirname(__FILE__),"../version.txt"))
program :description, "Journalling application"

make_item = lambda do |c, type|
  c.syntax = "j #{type} \"Text goes here\""
  c.option "--visual", "Switch to visual editor to type this up."
  c.option "--yesterday", "Make an entry for yesterday."
  c.description = "Add a new #{type} to your journal. If text is not supplied, will read from stdin."

  c.action do |args, opts|
    en = J::Entry.create do |e|
      e.body = if args.empty?
        if opts.visual
          t = Tempfile.new("j")
          t.close
          `subl -w #{t.path}`
          File.read(t.path)
        else
          $stdin.read
        end
      else
        args.shift
      end
      e.entry_type = type
      e.auto_tag!
    end
    if opts.yesterday
      now = Time.now
      yesterday = now - (now.hour*60*60 + now.min*60 + now.sec + 1)
      en.created_at = yesterday
      puts "Yday: #{yesterday}"
      en.save!
    end
    puts "Entry created:\n#{en}"
  end
end

command :update do |c|
  c.syntax = "j update"
  c.description = "Ensure we're running the latest database version."

  c.action do
    puts "Checking now..."
    J::Database::ensure_latest_version!
    puts "Database status checked!"
  end
end

command :note do |c|
  make_item[c, :note]
end

command :event do |c|
  make_item[c,:event]
end

command :today do |c|
  c.syntax = "j list"
  c.description = "List all of today's bullet journal entries."

  c.action do |args|
    midnight_today = Date.today.to_time.utc
    entries = J::Entry.where("created_at > ?", midnight_today)
    entries.each do |e|
      puts e
    end
  end
end

command :week do |c|
  c.syntax = "j week"
  c.description = "List all events this week."

  c.action do
    today = Date.today
    monday = today
    monday -= 1 until monday.monday?
    monday.upto(today) do |d|
      puts d.strftime("%A:")
      midnight_today = d.to_time.utc
      midnight_tomorrow = (d+1).to_time.utc
      J::Entry.where(
        created_at: [midnight_today...midnight_tomorrow],
        int_type: J::Entry::ENTRY_TYPES.index(:event)
      ).each do |e|
        puts "  #{e}"
      end
    end
  end
end

command :upload do |c|
  c.syntax = "j upload [--name=NAME] file"
  c.description = "Upload an image to the J database. Full path of the image will be copied to the clipboard."
  c.option "--name NAME", String, "Rename the file. Note that j will keep the extension. If this isn't supplied, will use the base name of the file."
  c.action do |args, opts|
    file = args.shift
    unless file
      $stderr.puts "You must supply a file"
      exit 1
    end

    i = J::Image.upload(file)

    if opts.name
      name = opts.name + File.extname(file)
      i.name = J::Image.timestamp(name)
    end

    i.save!
    `echo -n #{i.path.shellescape} | pbcopy`
    puts "Image uploaded. Path copied to clipboard."
  end
end

command :image do |c|
  c.syntax = "j image [--limit=LIM] [N]"
  c.description = "View the paths of the last LIM images to be uploaded. If the N argument is given, will instead copy the path of this image to the clipboard."
  c.option "--limit LIM", Integer, "The number of images to examine. Default: 5"
  c.action do |args,opts|
    if num = args.shift
      num = num.to_i
      if num < 1
        $stderr.puts "N must be greater than 0"
        exit 1
      end
      i = J::Image.order("created_at DESC")[num-1]
      `echo -n #{i.path.shellescape} | pbcopy`
      puts "Path copied to clipboard: #{i}"
    else
      opts.default limit: 5
      is = J::Image.order("created_at DESC").limit(opts.limit)
      is.each_with_index do |im, n|
        puts "#{n+1}) #{im}"
      end
    end
  end
end

command default: :today